/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/ajaxinate@3.0.1/src/ajaxinate.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/ajaxinate@3.0.1/src/ajaxinate.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function Ajaxinate(options) {
  const defaults = {
    method: "scroll",
    container: "#AjaxinateContainer",
    pagination: "#AjaxinatePagination",
    offset: 0,
    loadingText: "Loading",
    callback: null
  };
  this.settings = Object.assign(defaults, options || {});
  this.cache = Object.assign({});
  
  this.addScrollListeners = this.addScrollListeners.bind(this);
  this.addClickListener = this.addClickListener.bind(this);
  this.checkIfPaginationInView = this.checkIfPaginationInView.bind(this);
  this.preventMultipleClicks = this.preventMultipleClicks.bind(this);
  this.removeClickListener = this.removeClickListener.bind(this);
  this.removeScrollListener = this.removeScrollListener.bind(this);
  this.removePaginationElement = this.removePaginationElement.bind(this);
  this.destroy = this.destroy.bind(this);
  
  this.containerElement = document.querySelector(this.settings.container);
  this.paginationElement = document.querySelector(this.settings.pagination);
  
  this.initialize();
}

Ajaxinate.prototype.initialize = function () {
  if (!this.containerElement) return;
  const methods = { click: this.addClickListener, scroll: this.addScrollListeners };
  methods[this.settings.method]();
  this.loadInCache();
};

Ajaxinate.prototype.addScrollListeners = function () {
  if (this.paginationElement) {
    document.addEventListener("scroll", this.checkIfPaginationInView);
    window.addEventListener("resize", this.checkIfPaginationInView);
    window.addEventListener("orientationchange", this.checkIfPaginationInView);
  }
};

Ajaxinate.prototype.addClickListener = function () {
  if (this.paginationElement) {
    this.nextPageLinkElement = this.paginationElement.querySelector("[data-collection-load-more]");
    this.clickActive = true;
    if (this.nextPageLinkElement) {
      this.nextPageLinkElement.addEventListener("click", this.preventMultipleClicks);
    }
  }
};

Ajaxinate.prototype.preventMultipleClicks = function (event) {
  event.preventDefault();
  if (this.clickActive) {
    this.nextPageLinkElement.classList.add('loading');
    this.nextPageUrl = this.nextPageLinkElement.dataset.nextUrl;
    this.clickActive = false;
    this.loadFromCache();
  }
};

Ajaxinate.prototype.checkIfPaginationInView = function () {
  const topOffset = this.paginationElement.getBoundingClientRect().top - this.settings.offset;
  const bottomOffset = this.paginationElement.getBoundingClientRect().bottom + this.settings.offset;
  if (topOffset <= window.innerHeight && bottomOffset >= 0) {
      this.nextPageLinkElement = this.paginationElement.querySelector("[data-collection-load-more]");
      this.removeScrollListener();
      if (this.nextPageLinkElement) {
          this.nextPageLinkElement.classList.add('loading');
          this.nextPageUrl = this.nextPageLinkElement.dataset.nextUrl;
          this.loadFromCache();
      }
  }
};

Ajaxinate.prototype.loadFromCache = function() {
  if(!this.cache && this.cache.html) {
    this.loadMore()
    return;
  }
  this.containerElement.insertAdjacentHTML("beforeend", this.cache.html)
  if(!this.cache.next) {
    this.removePaginationElement()
  } else {
    this.paginationElement.innerHTML = this.cache.next
    this.initialize();
  }
  document.dispatchEvent(new CustomEvent('ajax:loaded'))
}

Ajaxinate.prototype.loadInCache = function() {
  this.request = new XMLHttpRequest();
  this.request.onreadystatechange = function() {
    if(!this.request.responseXML) return;
    if(this.request.readyState !== 4 || this.request.status !== 200) return;

    const newContent = this.request.responseXML.querySelectorAll(this.settings.container)[0];
    const newPagination = this.request.responseXML.querySelectorAll(this.settings.pagination)[0];

    this.cache.html = newContent.innerHTML
    if(!newPagination) {
      this.cache.next = null
    } else {
      this.cache.next = newPagination.innerHTML
      this.cache.nextPageUrl = newPagination.querySelector("[data-collection-load-more]")?.dataset?.nextUrl
      
      if (this.settings.callback && typeof this.settings.callback === "function") {
          this.settings.callback(this.request.responseXML);
      }
    }
  }.bind(this)

  if(!this.nextPageUrl) {
    if (this.paginationElement) {
      this.nextPageLinkElement = this.paginationElement.querySelector("[data-collection-load-more]");
      if(this.nextPageLinkElement) {
        this.nextPageUrl = this.nextPageLinkElement.dataset.nextUrl;
      }
    }
  }
  this.request.open("GET", this.cache.nextPageUrl ? this.cache.nextPageUrl : this.nextPageUrl)
  this.request.responseType = "document"
  this.request.send()
}

Ajaxinate.prototype.loadMore = function () {
  this.request = new XMLHttpRequest();
  this.request.onreadystatechange = function () {
      if (!this.request.responseXML) return;
      if (this.request.readyState !== 4 || this.request.status !== 200) return;
      const newContent = this.request.responseXML.querySelectorAll(this.settings.container)[0];
      const newPagination = this.request.responseXML.querySelectorAll(this.settings.pagination)[0];
      this.containerElement.insertAdjacentHTML("beforeend", newContent.innerHTML);
      if (!newPagination) {
        this.removePaginationElement();
      } else {
        this.paginationElement.innerHTML = newPagination.innerHTML;
        if (this.settings.callback && typeof this.settings.callback === "function") {
            this.settings.callback(this.request.responseXML);
        }
        this.initialize();
      }
      document.dispatchEvent(new CustomEvent('ajax:loaded'))
  }.bind(this);
  
  this.request.open("GET", this.nextPageUrl);
  this.request.responseType = "document";
  this.request.send();
};

Ajaxinate.prototype.removeClickListener = function () {
  if (this.nextPageLinkElement) {
      this.nextPageLinkElement.removeEventListener("click", this.preventMultipleClicks);
  }
};

Ajaxinate.prototype.removePaginationElement = function () {
  this.paginationElement.innerHTML = "";
  this.destroy();
};

Ajaxinate.prototype.removeScrollListener = function () {
  document.removeEventListener("scroll", this.checkIfPaginationInView);
  window.removeEventListener("resize", this.checkIfPaginationInView);
  window.removeEventListener("orientationchange", this.checkIfPaginationInView);
};

Ajaxinate.prototype.destroy = function () {
  const methods = { click: this.removeClickListener, scroll: this.removeScrollListener };
  methods[this.settings.method]();
  return this;
};

// Expose Ajaxinate globally
window.Ajaxinate = Ajaxinate;

